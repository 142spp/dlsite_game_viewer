사용자 편의성 증대    
- [P1] 정렬 개선
- [P1] 필터(검색) 개선
- [P2] 게임상세정보 페이지 태그를 하이퍼링크 형태로 + 제거,추가 용이하게
- [P2] 세이브폴더 경로 저장
- [P3] 플레이타임 구현 
- [P3] 마지막 플레이 시간 저장
- [P4] 폴더 뿐 아니라 압축파일까지 지원
- [P4] 그리드(현재구현) + 리스트형태로 보기

최적화
- [P2] 대량 파일 스캔 작업 성능 개선
- [P3] 취소 토큰(CancellationToken) 지원 추가로 장시간 작업 제어 기능 개선
- [P2] 이미지 캐싱 및 로딩 최적화

심미성 증대
- [P3] ResourceDictionary를 활용한 테마 적용 개선
- [P2] UI 디자인 전반적 개선

아키텍처 개선
- [P3] 단위 테스트 및 통합 테스트 추가

데이터 관리 개선
- [P1] 데이터베이스 스키마 업데이트
- [P4] 오픈소스 압축 파일 라이브러리(SharpCompress 등) 통합
- [P4] FolderScannerService 확장하여 압축 파일 내부 스캔 지원

기타 개선사항
- [P2] 집중화된 오류 처리 서비스 구현
- [P3] NLog/Serilog 로깅 시스템 추가
- [P4] 리소스 파일을 통한 다국어 지원 시스템
- [P3] 사용자 설정 페이지 및 JSON 기반 설정 저장 기능



1. 사용자 편의성 증대
정렬 및 필터(검색) 기능 개선 (P1)
README.md에서도 고급 정렬 및 필터/검색 기능 향상이 언급되었습니다.
현재 MainViewModel.cs에 기본적인 정렬 (제목, 식별자, 제작사, 평점 기준 오름차순/내림차순) 및 검색 기능이 구현되어 있습니다.
다양한 조건 (장르, 태그, 추가된 날짜 등)으로 정렬하고, 여러 필터를 조합하여 검색할 수 있도록 기능을 확장할 수 있습니다.

폴더스캔 도중 중단 기능(P1)


게임 상세 정보 페이지 개선 (P2)
태그를 하이퍼링크 형태로 구현하고, 태그 추가/제거 기능을 용이하게 만듭니다.
GameInfoViewModel.cs에서 현재 장르를 쉼표로 구분된 문자열로 관리하고 있는데, 이를 개별 태그로 관리하고 UI에 반영하는 작업이 필요합니다.

부가 정보 저장 기능 추가 (P2, P3)
세이브 폴더 경로 저장 기능을 추가합니다.
플레이타임 추적 및 마지막 플레이 시간을 저장하고 표시하는 기능을 구현합니다.
GameInfo.cs 모델에 해당 필드들을 추가하고, DatabaseService.cs의 스키마 업데이트 및 관련 로직 수정이 필요합니다.

입력 소스 확장 (P4)
현재 폴더 기반 스캔 외에 압축 파일(ZIP, RAR 등) 지원을 추가합니다.
이를 위해 FolderScannerService.cs를 확장하고, SharpCompress와 같은 오픈소스 압축 파일 라이브러리 통합을 고려할 수 있습니다.

뷰 옵션 추가 (P4)
현재 구현된 그리드 뷰 외에 리스트 형태로 게임 목록을 볼 수 있는 기능을 추가합니다.



2. 최적화
성능 개선 (P2, P3)
대량 파일 스캔 작업의 성능을 개선합니다. FolderScanHelper.cs 와 FolderScannerService.cs의 로직 검토 및 최적화가 필요합니다.
장시간 작업 제어를 위해 취소 토큰(CancellationToken) 지원을 추가합니다.
이미지 캐싱 및 로딩을 최적화합니다. Utils/Converters.cs의 PathToImageSourceConverter 와 ImageService.cs 관련 로직을 개선할 수 있습니다.
메모리 사용량 최적화
애플리케이션 전반의 메모리 사용량을 분석하고 최적화합니다.

3. 심미성 증대
테마 기능 개선 (P2, P3)
다크 모드 테마를 추가하고, 사용자 인터페이스 디자인을 전반적으로 개선합니다.
ThemeManager.cs 와 Styles/CustomWindowStyle.cs를 활용하여 다양한 테마 옵션을 제공하고, ResourceDictionary를 활용한 테마 적용을 개선합니다.
UI 디자인 개선
전체적인 UI/UX를 검토하고 사용자 친화적으로 개선합니다.

4. 아키텍처 개선
의존성 주입(DI) 시스템 도입 (P2)
이미 App.xaml.cs에서 Microsoft.Extensions.DependencyInjection를 활용한 기본적인 DI 설정이 되어 있습니다. 이를 프로젝트 전반으로 확장하고 체계적으로 관리합니다.

테스트 추가 (P3)
단위 테스트 및 통합 테스트를 추가하여 코드의 안정성과 유지보수성을 높입니다.

5. 데이터 관리 개선
GameInfo 모델 확장 (P1)
플레이타임, 마지막 플레이 시간, 세이브 폴더 경로 등의 필드를 GameInfo.cs 모델에 추가합니다.

데이터베이스 스키마 업데이트 (P1)
GameInfo 모델 변경에 따라 DatabaseService.cs에서 SQLite 데이터베이스 스키마를 업데이트하고 관련 CRUD 로직을 수정합니다.
데이터 정리 기능
더 이상 존재하지 않는 폴더의 항목을 데이터베이스에서 제거하는 기능을 구현합니다. (MainViewModel.cs의 DeleteGame, ClearDatabase 등과 연관지어 고려)

6. 기타 개선사항
오류 처리 개선 (P2)
집중화된 오류 처리 서비스를 구현하여 예외 상황에 보다 효과적으로 대응합니다.

로깅 시스템 추가 (P3)
NLog 또는 Serilog와 같은 로깅 시스템을 추가하여 애플리케이션 동작 기록 및 디버깅을 용이하게 합니다.

다국어 지원 (P4)
리소스 파일을 통한 다국어 지원 시스템을 구축합니다.

사용자 설정 기능 (P3)
사용자 설정 페이지를 만들고, JSON 파일 등을 이용하여 설정을 저장하고 불러오는 기능을 구현합니다.
